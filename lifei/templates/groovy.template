$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

|includefile|=groovy.file.template
|includefile|=gsp.template
|includefile|=grails.template

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ 自动完成模板 <<<
== groovy.AutoComplete.if == insert ==
if(<CURSOR>)
{
    `<TODO:Statements>` 
}
== groovy.AutoComplete.for == insert ==
for(<CURSOR> in `<TODO:Variable>`)
{
    `<TODO:Statements>` 
}
== groovy.AutoComplete.each == insert ==
each{
    <CURSOR> 
}
== groovy.AutoComplete.jo.join() == insert ==
join(<CURSOR>)
== groovy.AutoComplete.so.sort() == insert ==
sort()
== groovy.AutoComplete.co.count() == insert ==
count()
== groovy.AutoComplete.pr.println == insert ==
println "<CURSOR>"
== groovy.AutoComplete.try == insert ==
try {
    <CURSOR> 
} catch(e) {
    `<TODO: catch statements>` 
}
== groovy.AutoComplete.str2date == insert ==
def <CURSOR> = new java.text.SimpleDateFormat(`<"yyyy-MM-dd hh:mm a">`).parse(`<TODO:String>`)
== groovy.AutoComplete.date2str == insert ==
def <CURSOR> = new java.text.SimpleDateFormat(`<"yyyy-MM-dd hh:mm a">`).format(`<TODO:String>`)
== groovy.AutoComplete.match.正则表达式匹配 == insert ==
|?Pattern|= ~/<CURSOR>/
def |?Matcher| = |Pattern|.matcher(`<TODO:Text>`)
|Matcher|.each{
    `<TODO:it[0],it[1]>` 
}
== groovy.AutoComplete.vim == insert ==
/*
vim600: ts=4 st=4 foldmethod=marker foldmarker={{{,}}} syn=groovy textwidth=1000
vim600: encoding=utf-8 commentstring=//\ %s
*/
== groovy.AutoComplete.fla.写message到flash == insert ==
flash.message = "<CURSOR>"
== groovy.AutoComplete.user.Controller获取登陆用户信息 == insert ==
def user = getLoginedUser();
if(!user) {
    flash.message = "您没有登陆，请先登陆系统";
    redirect controller:'login';
    return;
}
== groovy.AutoComplete.show.跳转到show的action == insert ==
redirect action:show, id:params.id;
return
== groovy.AutoComplete.sssss == insert ==
$ >>>
== groovy.网络.读取Get网页 == before ==
$ <<<
DefaultHttpClient httpclient = new DefaultHttpClient();      //实例化一个HttpClient
HttpResponse response = null;
HttpEntity entity = null;
HttpGet httpget = new HttpGet(`<TODO: url>`);           //引号中的参数是：servlet的地址
response = httpclient.execute(httpget);                                               //执行
entity = response.getEntity();                                                             //返回服务器响应
try{
    System.out.println("----------------------------------------");
    System.out.println(response.getStatusLine());                           //服务器返回状态
    Header[] headers = response.getAllHeaders();                    //返回的HTTP头信息
    for (int i=0; i<headers.length; i++) {                              
        System.out.println(headers[i]);
    }
    System.out.println("----------------------------------------");
    String responseString = null;
    if (response.getEntity() != null) {
        responseString = EntityUtils.toString(response.getEntity());      / /返回服务器响应的HTML代码
            System.out.println(responseString);                                   //打印出服务器响应的HTML代码
    }
} finally {
    if (entity != null)                          
        entity.consumeContent();                                                   // release connection gracefully
}
System.out.println("Login form get: " + response.getStatusLine());
if (entity != null) {
    entity.consumeContent();
}
$ >>>
== groovy.网络.读取Post网页 == before ==
$ <<<
DefaultHttpClient httpclient = new DefaultHttpClient();      //实例化一个HttpClient
HttpResponse response = null;
HttpEntity entity = null;
httpclient.getParams().setParameter(
        ClientPNames.COOKIE_POLICY, CookiePolicy.BROWSER_COMPATIBILITY);  //设置cookie的兼容性
HttpPost httpost = new HttpPost(`<TODO: url>`);           //引号中的参数是：servlet的地址
List <NameValuePair> nvps = new ArrayList <NameValuePair>();                     
nvps.add(new BasicNameValuePair("jqm", "fb1f7cbdaf2bf0a9cb5d43736492640e0c4c0cd0232da9de"));  
nvps.add(new BasicNameValuePair("sqm", "1bb5b5b45915c8"));
httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));            //将参数传入post方法中
response = httpclient.execute(httpost);                                               //执行
entity = response.getEntity();                                                             //返回服务器响应
try{
    System.out.println("----------------------------------------");
    System.out.println(response.getStatusLine());                           //服务器返回状态
    Header[] headers = response.getAllHeaders();                    //返回的HTTP头信息
    for (int i=0; i<headers.length; i++) {                              
        System.out.println(headers[i]);
    }
    System.out.println("----------------------------------------");
    String responseString = null;
    if (response.getEntity() != null) {
        responseString = EntityUtils.toString(response.getEntity());      / /返回服务器响应的HTML代码
            System.out.println(responseString);                                   //打印出服务器响应的HTML代码
    }
} finally {
    if (entity != null)                          
        entity.consumeContent();                                                   // release connection gracefully
}
System.out.println("Login form get: " + response.getStatusLine());
if (entity != null) {
    entity.consumeContent();
}
$ >>>
== groovy.数据库.读数据库 == insert == 
$ <<<
def sql = groovy.sql.Sql.newInstance("jdbc:mysql://localhost:3306/<CURSOR>",
        "root",
        "`<TODO:password>`", "org.gjt.mm.mysql.Driver")
sql.eachRow("`<TODO:SQL>`"){ row ->
    println row.url 
}
$ >>>
== groovy.json.生成json == insert == 
net.sf.json.groovy.GJson.enhanceClasses() 
def `<TODO:json>` = <CURSOR> as net.sf.json.JSONObject
$ vim600: ts=4 st=4 foldmethod=marker foldmarker=<<<,>>> syn=groovy
$ vim600: encoding=utf-8 commentstring=$\ %s
